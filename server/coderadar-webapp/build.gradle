import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${version_springBoot}"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "se.transmode.gradle:gradle-docker:1.2"
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'docker'

ext{
    snippetsDir = file('build/generated-snippets')
}

test{
    outputs.dir snippetsDir

    useJUnit{
        // disable long-running integration tests by default
        excludeCategories 'org.wickedsource.coderadar.IntegrationTest'
    }
}

task integrationTest(type: Test){
    useJUnit{
        includeCategories 'org.wickedsource.coderadar.IntegrationTest'
    }
}

asciidoctor {
    attributes  'snippets': snippetsDir,
                'version': version,
                'date': new SimpleDateFormat("yyyy-MM-dd").format(new Date())
    inputs.dir snippetsDir
    dependsOn test
    sourceDir 'src/main/asciidoc'
    outputDir 'doc/restapi'
}

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-hateoas'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile group: 'org.apache.commons', name: 'commons-exec', version: '1.3'
    compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '4.1.0.201509280440-r'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'io.fabric8', name: 'gitective-core', version: '0.9.10'
    compile 'com.h2database:h2:1.4.191'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.hibernate:hibernate-validator:5.2.4.Final'

    compile project(':plugins:loc-analyzer-plugin')
    compile project(":plugins:analyzer-plugin-api")

    runtime group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.slf4j', name: 'slf4j-ext', version: '1.7.21'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:1.1.0.RELEASE'
    testCompile 'org.springframework.restdocs:spring-restdocs-core:1.1.0.RELEASE'
}

bootRepackage {
    mainClass = 'org.wickedsource.coderadar.Coderadar'
    executable = true
}

bootRun {
    jvmArgs =
            [
                    "-Xdebug",
                    "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005",
                    "-Dlogging.level.org.wickedsource.coderadar=DEBUG",
                    "-Dlogging.level.org.wickedsource.coderadar.job.JobLogger=INFO",
                    "-Dlogging.level.org.hibernate.SQL=ERROR",
                    "-Dlogging.level.org.hibernate.type=ERROR",
                    "-Dlogging.file=coderadar.log",

                    "-Dcoderadar.master=false",
                    "-Dcoderadar.slave=false",
                    "-Dcoderadar.scanIntervalInSeconds=30",
                    "-Dcoderadar.workdir=C:/coderadar",

                    "-Dspring.jpa.hibernate.ddl-auto=create-drop",

                    // use these for file based H2
//                    "-Dspring.datasource.url=jdbc:h2:file:C:/coderadar/database",
//                    "-Dspring.datasource.username=sa",
//                    "-Dspring.datasource.password=sa",
//                    "-Dspring.datasource.driverClassName=org.h2.Driver",

                    // use these for My SQL
                    "-Dspring.datasource.url=jdbc:mysql://localhost/coderadar",
                    "-Dspring.datasource.username=coderadar",
                    "-Dspring.datasource.password=coderadar",
                    "-Dspring.datasource.driver-class-name=com.mysql.jdbc.Driver",
            ]
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    tagVersion = 'latest'
    tag = "${project.dockerGroup}/coderadar-server"

    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from("${project.buildDir}/libs/") {
                rename "${jar.baseName}-.*\\.jar", "${jar.baseName}.jar"
            }
            into stageDir
            exclude '*.original'
        }
        copy {
            from "${projectDir}/src/main/docker"
            into stageDir
            include 'application.properties'
        }
    }
}
